# Sample workflow for building and deploying a Jekyll site to GitHub Pages
name: Deploy Jekyll with GitHub Pages dependencies preinstalled

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Pages
        uses: actions/configure-pages@v5
        
      - name: Build with Jekyll
        uses: actions/jekyll-build-pages@v1
        with:
          source: ./
          destination: ./_site
          
      - name: Auto Minify
        # You may pin to the exact commit or the version.
        # uses: nizarmah/auto-minify@5a5c9921c0b236b94e31dae5e585ffa0dded1100
        uses: nizarmah/auto-minify@v3.0.0
        with:
          directory: ./_site
          overwrite: true
          
      - name: Install Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18'

      - name: Run PurgeCSS
        run: |
          npx purgecss --css _site/**/*.css --content _site/**/*.html --output _site/assets/css/
          
      - name: Install Critters
        run: npm install -g critters
        
      - name: Inline Critical CSS with Critters
        run: |
          find _site -name '*.html' -exec critters --path _site {} \;

      - name: Install Sharp for Image Optimization
        run: npm install sharp

      - name: Optimize Images and Convert to WebP with Sharp
        run: |
          # Ottimizza le immagini JPG, JPEG e PNG
          find _site/img -type f \( -name '*.jpg' -o -name '*.jpeg' -o -name '*.png' \) -exec sh -c '
            for img; do
              npx sharp "$img" \
                --resize 1920 \
                --jpeg quality=80 \
                --png compressionLevel=8 \
                --output "$img"

              # Converte in WebP e salva nella stessa directory
              webp_img="${img%.*}.webp"
              npx sharp "$img" \
                --resize 1920 \
                --webp quality=80 \
                --output "$webp_img"
            done
          ' sh {} +
      
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
