name: Create Jekyll Post from Issue

on:
  issues:
    types: [opened]

permissions:
  contents: write
  issues: read

jobs:
  create-post:
    if: contains(join(fromJSON(toJSON(github.event.issue.labels)).*.name, ','), 'new-post')
    runs-on: ubuntu-latest
    steps:
      - name: Build file from issue
        id: build
        uses: actions/github-script@v7
        with:
          script: |
            const body = context.payload.issue.body || '';
            function grab(label) {
              const re = new RegExp(`(?:\\*\\*${label}:\\*\\*|${label}:)\\s*(.+)`, 'i');
              const m = body.match(re);
              return m ? m[1].trim() : '';
            }

            const title = grab('Title') || 'Draft';
            const slugRaw = grab('Slug');
            const tags = grab('Tags') || 'draft';
            const image = grab('Image') || '';

            const marker = body.match(/###\\s*Body/i);
            const content = marker ? body.slice(marker.index + marker[0].length).trim() : body.trim();

            const slug = (slugRaw || title)
              .toLowerCase()
              .replace(/[^a-z0-9]+/g, '-')
              .replace(/(^-|-$)/g, '');

            const now = new Date();
            const yyyy = now.getUTCFullYear();
            const mm = String(now.getUTCMonth() + 1).padStart(2, '0');
            const dd = String(now.getUTCDate()).padStart(2, '0');

            const filename = `_posts/${yyyy}-${mm}-${dd}-${slug}.md`;
            const img = image || `/img/posts/${slug}.jpg`;

            const front = [
              '---',
              'layout: post',
              `title: "${title.replace(/"/g, '\\"')}"`,
              `tags: ${tags}`,
              `image: ${img}`,
              'typewriter-delay: 20',
              'published: false',
              '---',
              ''
            ].join('\n');

            const fileContent = front + content + '\n';
            const base64 = Buffer.from(fileContent, 'utf8').toString('base64');

            let sha = undefined;
            try {
              const { data } = await github.rest.repos.getContent({
                owner: context.repo.owner,
                repo: context.repo.repo,
                path: filename,
                ref: 'main'
              });
              if (!Array.isArray(data)) sha = data.sha;
            } catch (_) {}

            await github.rest.repos.createOrUpdateFileContents({
              owner: context.repo.owner,
              repo: context.repo.repo,
              path: filename,
              message: `chore(post): add draft ${slug}`,
              content: base64,
              sha,
              branch: 'main'
            });

            core.setOutput('filename', filename);

      - name: Comment with link
        uses: actions/github-script@v7
        with:
          script: |
            const filename = '${{ steps.build.outputs.filename }}';
            const url = `https://github.com/${context.repo.owner}/${context.repo.repo}/blob/main/${filename}`;
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `âœ… Draft creato: ${url}`
            });
